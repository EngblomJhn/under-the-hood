apply plugin: 'com.android.application'
Properties localProps = getSigningProperties()

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        release {
            storeFile file(localProps.getProperty('RELEASE_KEYSTORE_PATH', 'fillhere'))
            storePassword localProps.getProperty('RELEASE_KEYSTORE_PW', '')
            keyAlias localProps.getProperty('RELEASE_KEY_ALIAS', '')
            keyPassword localProps.getProperty('RELEASE_KEY_PW', '')
        }
    }

    defaultConfig {
        applicationId "at.favre.app.hood.demo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionNameApp
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_REV", "\"" + getGitRev() + "\""
        buildConfigField "String", "GIT_BRANCH", "\"" + getGitBranch() + "\""
        buildConfigField "String", "GIT_DATE", "\"" + getGitCommitDate() + "\""
        buildConfigField "String", "BUILD_NUMBER", "\"" + getCiBuildNumber() + "\""
        buildConfigField "String", "BUILD_DATE", "\"" + getBuildTime() + "\""
        buildConfigField "boolean", "IS_CI_BUILD", "${isCiBuild()}"
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            applicationIdSuffix '.debug'
            minifyEnabled false
            shrinkResources false
        }

        noop {
            applicationIdSuffix '.noop'
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
        }

        buildTypes.all {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }


}

dependencies {
    androidTestCompile(group: 'com.android.support.test.espresso', name: 'espresso-core', version: rootProject.ext.dependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation "com.android.support:appcompat-v7:$rootProject.ext.dependencies.support"
    implementation 'com.jakewharton.timber:timber:4.5.0'

    testCompile "junit:junit:$rootProject.ext.dependencies.junit"
    //    debugCompile("at.favre.lib.hood:hood-extended:$rootProject.ext.versionNameDep")
    //    releaseCompile("at.favre.lib.hood:hood-extended:$rootProject.ext.versionNameDep")
    //
    //    releaseNoopCompile("at.favre.lib.hood:hood-extended:$rootProject.ext.versionNameDep") {
    //        exclude group: 'at.favre.lib.hood', module: 'hood-core'
    //        releaseNoopCompile(group: 'at.favre.lib.hood', name: 'hood-core', version: rootProject.ext.versionNameDep,
    //                classifier: 'noop', ext: 'aar', transitive: true)
    //    }

    implementation project(':hood-extended')
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}