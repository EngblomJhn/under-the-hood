apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "at.favre.app.hood.demo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionNameApp
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_REV", "\"" + getGitRev() + "\""
        buildConfigField "String", "GIT_BRANCH", "\"" + getGitBranch() + "\""
        buildConfigField "String", "GIT_DATE", "\"" + getGitCommitDate() + "\""

    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        develop {
            minifyEnabled false
            shrinkResources false
        }

        releaseTestNoop {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
        }

        releaseTest {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.debug
        }

        releaseNoop {
            minifyEnabled true
            shrinkResources true
        }

        release {
            minifyEnabled true
            shrinkResources true
        }

        buildTypes.all {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.dependencies.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.ext.dependencies.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile "com.android.support:appcompat-v7:$rootProject.ext.dependencies.support"

    testCompile "junit:junit:$rootProject.ext.dependencies.junit"

//    compile('at.favre.lib.hood:hood-extended:0.2.0') {
//        compile(group: 'at.favre.lib.hood', name: 'hood-core', version: '0.2.0', classifier: 'release', ext: 'aar', transitive: true)
//    }

    debugCompile project(path: ':hood-extended')
    releaseCompile project(path: ':hood-extended')
}

def String getGitRev() {
    def git_rev = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format=%H'
        standardOutput = git_rev
    }
    git_rev = git_rev.toString().trim()
    return git_rev
}

def String getGitCommitDate() {
    def git_date = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format=%cI'
        standardOutput = git_date
    }
    git_date = git_date.toString().trim()
    return git_date
}

def String getGitBranch() {
    def git_branch = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = git_branch
        ignoreExitValue = true
    }
    git_branch = git_branch.toString().trim()
    return git_branch
}
