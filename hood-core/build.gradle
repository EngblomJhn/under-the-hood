apply plugin: 'com.android.library'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'jacoco-android'

def Properties localProps = rootProject.getSigningProperties()

android {
    publishNonDefault false
    defaultPublishConfig "release"
    testBuildType "release"

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    signingConfigs {
        release {
            storeFile file(localProps.getProperty('RELEASE_KEYSTORE_PATH', 'fillhere'))
            storePassword localProps.getProperty('RELEASE_KEYSTORE_PW', '')
            keyAlias localProps.getProperty('RELEASE_KEY_ALIAS', '')
            keyPassword localProps.getProperty('RELEASE_KEY_PW', '')
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionNameLib

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "BUILD_NUMBER", "\"" + getCiBuildNumber() + "\""
        buildConfigField "String", "BUILD_DATE", "\"" + getBuildTime() + "\""
        buildConfigField "boolean", "NO_OP", "false"
    }

    buildTypes {
        noop {
            minifyEnabled false
            buildConfigField "boolean", "NO_OP", "true"
            consumerProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-noop.pro'
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled false
            consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    unMock {
        keepStartingWith "android.util"
        keepStartingWith "com.android.internal"
        keep "android.view.MotionEvent"
    }

    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace((".aar"), "-${version}.aar"))
        }
    }
}

android.variantFilter { variant ->
    if (variant.buildType.name == com.android.builder.core.BuilderConstants.DEBUG) {
        variant.setIgnore(true);
    }
}

dependencies {
    androidTestCompile(group: 'com.android.support.test.espresso', name: 'espresso-core', version: rootProject.ext.dependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile "com.android.support:support-compat:$rootProject.ext.dependencies.support"
    compile "com.android.support:support-core-utils:$rootProject.ext.dependencies.support"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.dependencies.support"
    compile 'com.jakewharton.timber:timber:4.4.0'
    compile 'com.squareup:seismic:1.0.2'

    testCompile "junit:junit:$rootProject.ext.dependencies.junit"
    unmock 'org.robolectric:android-all:4.3_r2-robolectric-0'
}

apply from: "$rootDir/gradle/publish.gradle"